From 5d62270717aa40f5a4cfc8388af86ba89e7fec65 Mon Sep 17 00:00:00 2001
From: Michael McAuliffe <michael.e.mcauliffe@gmail.com>
Date: Thu, 9 Feb 2023 15:53:35 -0800
Subject: [PATCH] CMakeLists

---
 CMakeLists.txt     | 147 +++++++++++++++++++++++++++++++++++++++++++++
 src/CMakeLists.txt |  31 ++++++++++
 2 files changed, 178 insertions(+)
 create mode 100644 CMakeLists.txt
 create mode 100644 src/CMakeLists.txt

diff --git CMakeLists.txt CMakeLists.txt
new file mode 100644
index 0000000..e15e6a6
--- /dev/null
+++ CMakeLists.txt
@@ -0,0 +1,147 @@
+
+cmake_minimum_required(VERSION 3.20)
+set(PROJECT_NAME vector)
+set(PROEJCT_VERSION "0.3.2")
+project(${PROJECT_NAME} VERSION ${PROEJCT_VERSION} LANGUAGES C)
+
+include(GNUInstallDirs)
+set(CMAKE_MACOSX_RPATH 1)
+
+
+# Search paths for Postgres binaries
+if (WIN32)
+    find_path(PG_PATH
+            bin/postgres
+            HINTS
+            "C:/PostgreSQL"
+            "C:/Program Files/PostgreSQL"
+            PATH_SUFFIXES
+            bin
+            10/bin
+            96/bin
+            pg96/bin
+            DOC
+            "The path to a PostgreSQL installation")
+endif (WIN32)
+
+if (UNIX)
+    find_path(PG_PATH
+            bin/postgres
+            HINTS
+            $ENV{HOME}
+            /opt/local/pgsql
+            /usr/local/pgsql
+            /usr/lib/postgresql
+            PATH_SUFFIXES
+            bin
+            10/bin
+            9.6/bin
+            96/bin
+            pg96/bin
+            DOC
+            "The path to a PostgreSQL installation")
+endif (UNIX)
+
+find_program(PG_CONFIG pg_config
+        HINTS
+        ${PG_PATH}
+        PATH_SUFFIXES
+        bin
+        DOC
+        "The path to the pg_config of the PostgreSQL version to compile against"
+        REQUIRED)
+
+if (NOT PG_CONFIG)
+    message(FATAL_ERROR "Unable to find 'pg_config'")
+endif ()
+
+
+# Check PostgreSQL version
+execute_process(
+        COMMAND ${PG_CONFIG} --version
+        OUTPUT_VARIABLE PG_VERSION_STRING
+        OUTPUT_STRIP_TRAILING_WHITESPACE)
+
+if (NOT ${PG_VERSION_STRING} MATCHES "^PostgreSQL[ ]+([0-9]+)\\.([0-9]+)(\\.([0-9]+))*$")
+    message(FATAL_ERROR "Could not parse PostgreSQL version ${PG_VERSION}")
+endif ()
+
+set(PG_VERSION_MAJOR ${CMAKE_MATCH_1})
+set(PG_VERSION_MINOR ${CMAKE_MATCH_2})
+set(PG_VERSION_PATCH ${CMAKE_MATCH_4})
+
+if (NOT ${PG_VERSION_PATCH} OR ${PG_VERSION_PATCH} EQUAL "")
+    set(PG_VERSION "${PG_VERSION_MAJOR}.${PG_VERSION_MINOR}")
+else ()
+    set(PG_VERSION "${PG_VERSION_MAJOR}.${PG_VERSION_MINOR}.${PG_VERSION_PATCH}")
+endif ()
+
+message(STATUS "Compiling against PostgreSQL version ${PG_VERSION}")
+
+set(CMAKE_POSITION_INDEPENDENT_CODE ON)
+find_package(PostgreSQL  REQUIRED)
+if (MSVC)
+
+    #set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)
+    add_compile_options(/O2 /fp:fast)
+
+    else()
+    add_compile_options(-ftree-vectorize -fassociative-math -fno-signed-zeros -fno-trapping-math)
+endif (MSVC)
+
+# Get PostgreSQL configuration from pg_config
+execute_process(
+        COMMAND ${PG_CONFIG} --includedir
+        OUTPUT_VARIABLE PG_INCLUDEDIR
+        OUTPUT_STRIP_TRAILING_WHITESPACE)
+execute_process(
+        COMMAND ${PG_CONFIG} --includedir-server
+        OUTPUT_VARIABLE PG_INCLUDEDIR_SERVER
+        OUTPUT_STRIP_TRAILING_WHITESPACE)
+execute_process(
+        COMMAND ${PG_CONFIG} --libdir
+        OUTPUT_VARIABLE PG_LIBDIR
+        OUTPUT_STRIP_TRAILING_WHITESPACE)
+execute_process(
+        COMMAND ${PG_CONFIG} --pkglibdir
+        OUTPUT_VARIABLE PG_PKGLIBDIR
+        OUTPUT_STRIP_TRAILING_WHITESPACE)
+execute_process(
+        COMMAND ${PG_CONFIG} --sharedir
+        OUTPUT_VARIABLE PG_SHAREDIR
+        OUTPUT_STRIP_TRAILING_WHITESPACE)
+execute_process(
+        COMMAND ${PG_CONFIG} --bindir
+        OUTPUT_VARIABLE PG_BINDIR
+        OUTPUT_STRIP_TRAILING_WHITESPACE)
+execute_process(
+        COMMAND ${PG_CONFIG} --cppflags
+        OUTPUT_VARIABLE PG_CPPFLAGS
+        OUTPUT_STRIP_TRAILING_WHITESPACE)
+execute_process(
+        COMMAND ${PG_CONFIG} --cflags
+        OUTPUT_VARIABLE PG_CFLAGS
+        OUTPUT_STRIP_TRAILING_WHITESPACE)
+execute_process(
+        COMMAND ${PG_CONFIG} --ldflags
+        OUTPUT_VARIABLE PG_LDFLAGS
+        OUTPUT_STRIP_TRAILING_WHITESPACE)
+execute_process(
+        COMMAND ${PG_CONFIG} --libs
+        OUTPUT_VARIABLE PG_LIBS
+        OUTPUT_STRIP_TRAILING_WHITESPACE)
+
+
+add_subdirectory(src)
+
+set(EXT_CONTROL_FILE ${PROJECT_NAME}.control)
+configure_file(${EXT_CONTROL_FILE} ${EXT_CONTROL_FILE})
+install(
+        FILES ${CMAKE_CURRENT_BINARY_DIR}/${EXT_CONTROL_FILE}
+        DESTINATION "${PG_SHAREDIR}/extension")
+INSTALL(
+    FILES ${CMAKE_SOURCE_DIR}/sql/${PROJECT_NAME}.sql 
+    DESTINATION ${CMAKE_PREFIX_PATH}/share/extension
+    RENAME ${PROJECT_NAME}--${PROEJCT_VERSION}.sql)
+
+INSTALL(DIRECTORY ${CMAKE_SOURCE_DIR}/sql/ DESTINATION ${CMAKE_PREFIX_PATH}/share/extension)
\ No newline at end of file
diff --git src/CMakeLists.txt src/CMakeLists.txt
new file mode 100644
index 0000000..f2ffac8
--- /dev/null
+++ src/CMakeLists.txt
@@ -0,0 +1,31 @@
+
+
+add_library(vector
+  MODULE
+  ivfbuild.c 
+  ivfflat.c 
+  ivfinsert.c 
+  ivfkmeans.c 
+  ivfscan.c 
+  ivfutils.c 
+  ivfvacuum.c 
+  vector.c
+)
+target_include_directories(vector PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
+                           $<INSTALL_INTERFACE:include>)
+target_include_directories(vector PRIVATE ${PostgreSQL_INCLUDE_DIRS})
+if (MSVC)
+target_include_directories(vector PRIVATE ${CMAKE_PREFIX_PATH}/include/server/port/win32)
+target_include_directories(vector PRIVATE ${CMAKE_PREFIX_PATH}/include/server/port/win32_msvc)
+
+endif(MSVC)
+target_link_libraries(vector postgres)
+
+set_target_properties(vector PROPERTIES PREFIX "")
+
+install(TARGETS vector
+LIBRARY DESTINATION lib
+ARCHIVE DESTINATION lib
+RUNTIME DESTINATION bin
+  )
+
-- 
2.25.1

